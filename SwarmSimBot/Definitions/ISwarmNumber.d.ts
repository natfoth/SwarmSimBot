declare module SwarmSim {
    export interface ISwarmNumber {
        constructor: (a, b) => any;
        s: any;
        e: any;
        c: any;
        abs: () => any;
        absoluteValue: () => any;
        ceil: () => any;
        cmp: (a, b) => any;
        comparedTo: (a, b) => any;
        dp: () => any;
        decimalPlaces: () => any;
        div: (a, b) => any;
        dividedBy: (a, b) => any;
        divToInt: (a, b) => any;
        dividedToIntegerBy: (a, b) => any;
        eq: (a, b) => any;
        equals: (a, b) => any;
        exp: () => any;
        exponential: () => any;
        floor: () => any;
        gt: (a, b) => any;
        greaterThan: (a, b) => any;
        gte: (a, b) => any;
        greaterThanOrEqualTo: (a, b) => any;
        isFinite: () => any;
        isInt: () => any;
        isInteger: () => any;
        isNaN: () => any;
        isNeg: () => any;
        isNegative: () => any;
        isZero: () => any;
        lt: (a, b) => any;
        lessThan: (a, b) => any;
        lte: (a, b) => any;
        lessThanOrEqualTo: (a, b) => any;
        log: (a, d) => any;
        logarithm: (a, d) => any;
        minus: (a, b) => any;
        mod: (a, b) => any;
        modulo: (a, b) => any;
        ln: () => any;
        naturalLogarithm: () => any;
        neg: () => any;
        negated: () => any;
        plus: (a, b) => any;
        sd: (a) => any;
        precision: (a) => any;
        round: () => any;
        sqrt: () => any;
        squareRoot: () => any;
        times: (a, b) => any;
        toDP: (a, b) => any;
        toDecimalPlaces: (a, b) => any;
        toExponential: (a, b) => any;
        toFixed: (a, b) => any;
        toFormat: (a, b) => any;
        toFraction: (a) => any;
        toNearest: (a, b) => any;
        toNumber: () => any;
        pow: (a, d) => any;
        toPower: (a, d) => any;
        toPrecision: (a, b) => any;
        toSD: (a, b) => any;
        toSignificantDigits: (a, b) => any;
        toString: (a) => string;
        trunc: () => any;
        truncated: () => any;
        toJSON: () => any;
        valueOf: () => any;
    }
}