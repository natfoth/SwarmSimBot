declare module SwarmSim {
    export interface IGame {
        session: any;
        _units: _private;
        _upgrades: _private;
        _achievements: _private;
        _init: () => _private;
        _realDiffMillis: () => _private;
        _respec: () => _private;

        achievementPointsPossible: number;
        tabs: any;
        skippedMillis: any;
        gameSpeed: number;
        cache: any;
        now: any;
        diffMillis: () => any;
        diffSeconds: () => any;
        skipMillis: (a) => any;
        skipDuration: (a) => any;
        skipTime: () => any;
        setGameSpeed: (speed: number) => any;
        totalSkippedMillis: () => any;
        totalSkippedDuration: () => any;
        dateStarted: () => any;
        momentStarted: () => any;
        tick: (a, b) => any;
        elapsedStartMillis: () => any;
        timestampMillis: () => any;
        unit: (a) => any;
        unitBySlug: (a) => any;
        units: () => _Indexer<IUnit>;
        unitlist: () => IUnit[];
        count: (a, b) => any;
        counts: () => _Indexer<ISwarmNumber>;
        countUnits: () => _Indexer<ISwarmNumber>;
        countUpgrades: () => _Indexer<ISwarmNumber>;
        getNewlyUpgradableUnits: () => IUnit[];
        upgrade: (a) => IUpgrade;
        upgrades: () => _Indexer<IUpgrade>;
        upgradelist: () => IUpgrade[];
        availableUpgrades: (a: number) => IUpgrade[];
        availableAutobuyUpgrades: (a: number) => IUpgrade[];
        ignoredUpgrades: () => IUpgrade[];
        unignoredUpgrades: () => IUpgrade[];
        resourcelist: () => any;
        achievement: (name: string) => IAchievement;
        achievements: () => _Indexer<IAchievement>;
        achievementlist: () => IAchievement[];
        achievementsSorted: () => IAchievement[];
        achievementPoints: () => any;
        achievementPercent: () => any;
        reify: (a) => any;
        save: () => any;
        importSave: (a, b) => any;
        withSave: (a) => any;
        withUnreifiedSave: (a) => any;
        reset: (a) => any;
        ascendEnergySpent: () => any;
        ascendCost: (a) => any;
        ascendCostCapDiff: (a) => any;
        ascendCostPercent: (a) => any;
        ascendCostDurationSecs: (a) => any;
        ascendCostDurationMoment: (a) => any;
        ascend: (a) => any;
        respecRate: () => any;
        respecCost: () => any;
        respecCostRate: any;
        respecCostCapDiff: () => any;
        respecCostPercent: () => any;
        respecCostDurationSecs: () => any;
        respecCostDurationMoment: () => any;
        isRespecCostMet: () => any;
        respecSpent: () => any;
        respec: () => any;
        respecFree: () => any;
    }
}